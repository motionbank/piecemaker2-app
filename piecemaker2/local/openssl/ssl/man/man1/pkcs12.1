.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PKCS12 1 "1.0.1e" "11/Feb/2013" "OpenSSL"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
pkcs12 \- PKCS#12 file utility
.SH "SYNOPSIS"
\fBopenssl\fR \fBpkcs12\fR
[\fB\-export\fR]
[\fB\-chain\fR]
[\fB\-inkey filename\fR]
[\fB\-certfile filename\fR]
[\fB\-name name\fR]
[\fB\-caname name\fR]
[\fB\-in filename\fR]
[\fB\-out filename\fR]
[\fB\-noout\fR]
[\fB\-nomacver\fR]
[\fB\-nocerts\fR]
[\fB\-clcerts\fR]
[\fB\-cacerts\fR]
[\fB\-nokeys\fR]
[\fB\-info\fR]
[\fB\-des | \-des3 | \-idea | \-aes128 | \-aes192 | \-aes256 | \-camellia128 | \-camellia192 | \-camellia256 | \-nodes\fR]
[\fB\-noiter\fR]
[\fB\-maciter | \-nomaciter | \-nomac\fR]
[\fB\-twopass\fR]
[\fB\-descert\fR]
[\fB\-certpbe cipher\fR]
[\fB\-keypbe cipher\fR]
[\fB\-macalg digest\fR]
[\fB\-keyex\fR]
[\fB\-keysig\fR]
[\fB\-password arg\fR]
[\fB\-passin arg\fR]
[\fB\-passout arg\fR]
[\fB\-rand file(s)\fR]
[\fB\-CAfile file\fR]
[\fB\-CApath dir\fR]
[\fB\-CSP name\fR]
.SH "DESCRIPTION"
The \fBpkcs12\fR command allows PKCS#12 files (sometimes referred to as
PFX files) to be created and parsed. PKCS#12 files are used by several
programs including Netscape, MSIE and MS Outlook.
.SH "COMMAND OPTIONS"
There are a lot of options the meaning of some depends of whether a PKCS#12 file
is being created or parsed. By default a PKCS#12 file is parsed. A PKCS#12
file can be created by using the \fB\-export\fR option (see below).
.SH "PARSING OPTIONS"
.Ip "\fB\-in filename\fR" 4
This specifies filename of the \s-1PKCS\s0#12 file to be parsed. Standard input is used
by default.
.Ip "\fB\-out filename\fR" 4
The filename to write certificates and private keys to, standard output by
default.  They are all written in \s-1PEM\s0 format.
.Ip "\fB\-pass arg\fR, \fB\-passin arg\fR" 4
the \s-1PKCS\s0#12 file (i.e. input file) password source. For more information about
the format of \fBarg\fR see the \fB\s-1PASS\s0 \s-1PHRASE\s0 \s-1ARGUMENTS\s0\fR section in
openssl(1).
.Ip "\fB\-passout arg\fR" 4
pass phrase source to encrypt any outputed private keys with. For more
information about the format of \fBarg\fR see the \fB\s-1PASS\s0 \s-1PHRASE\s0 \s-1ARGUMENTS\s0\fR section
in openssl(1).
.Ip "\fB\-noout\fR" 4
this option inhibits output of the keys and certificates to the output file
version of the \s-1PKCS\s0#12 file.
.Ip "\fB\-clcerts\fR" 4
only output client certificates (not \s-1CA\s0 certificates).
.Ip "\fB\-cacerts\fR" 4
only output \s-1CA\s0 certificates (not client certificates).
.Ip "\fB\-nocerts\fR" 4
no certificates at all will be output.
.Ip "\fB\-nokeys\fR" 4
no private keys will be output.
.Ip "\fB\-info\fR" 4
output additional information about the \s-1PKCS\s0#12 file structure, algorithms used and
iteration counts.
.Ip "\fB\-des\fR" 4
use \s-1DES\s0 to encrypt private keys before outputting.
.Ip "\fB\-des3\fR" 4
use triple \s-1DES\s0 to encrypt private keys before outputting, this is the default.
.Ip "\fB\-idea\fR" 4
use \s-1IDEA\s0 to encrypt private keys before outputting.
.Ip "\fB\-aes128\fR, \fB\-aes192\fR, \fB\-aes256\fR" 4
use \s-1AES\s0 to encrypt private keys before outputting.
.Ip "\fB\-camellia128\fR, \fB\-camellia192\fR, \fB\-camellia256\fR" 4
use Camellia to encrypt private keys before outputting.
.Ip "\fB\-nodes\fR" 4
don't encrypt the private keys at all.
.Ip "\fB\-nomacver\fR" 4
don't attempt to verify the integrity \s-1MAC\s0 before reading the file.
.Ip "\fB\-twopass\fR" 4
prompt for separate integrity and encryption passwords: most software
always assumes these are the same so this option will render such
\s-1PKCS\s0#12 files unreadable.
.SH "FILE CREATION OPTIONS"
.Ip "\fB\-export\fR" 4
This option specifies that a \s-1PKCS\s0#12 file will be created rather than
parsed.
.Ip "\fB\-out filename\fR" 4
This specifies filename to write the \s-1PKCS\s0#12 file to. Standard output is used
by default.
.Ip "\fB\-in filename\fR" 4
The filename to read certificates and private keys from, standard input by
default.  They must all be in \s-1PEM\s0 format. The order doesn't matter but one
private key and its corresponding certificate should be present. If additional
certificates are present they will also be included in the \s-1PKCS\s0#12 file.
.Ip "\fB\-inkey filename\fR" 4
file to read private key from. If not present then a private key must be present
in the input file.
.Ip "\fB\-name friendlyname\fR" 4
This specifies the \*(L"friendly name\*(R" for the certificate and private key. This
name is typically displayed in list boxes by software importing the file.
.Ip "\fB\-certfile filename\fR" 4
A filename to read additional certificates from.
.Ip "\fB\-caname friendlyname\fR" 4
This specifies the \*(L"friendly name\*(R" for other certificates. This option may be
used multiple times to specify names for all certificates in the order they
appear. Netscape ignores friendly names on other certificates whereas \s-1MSIE\s0
displays them.
.Ip "\fB\-pass arg\fR, \fB\-passout arg\fR" 4
the \s-1PKCS\s0#12 file (i.e. output file) password source. For more information about
the format of \fBarg\fR see the \fB\s-1PASS\s0 \s-1PHRASE\s0 \s-1ARGUMENTS\s0\fR section in
openssl(1).
.Ip "\fB\-passin password\fR" 4
pass phrase source to decrypt any input private keys with. For more information
about the format of \fBarg\fR see the \fB\s-1PASS\s0 \s-1PHRASE\s0 \s-1ARGUMENTS\s0\fR section in
openssl(1).
.Ip "\fB\-chain\fR" 4
if this option is present then an attempt is made to include the entire
certificate chain of the user certificate. The standard \s-1CA\s0 store is used
for this search. If the search fails it is considered a fatal error.
.Ip "\fB\-descert\fR" 4
encrypt the certificate using triple \s-1DES\s0, this may render the \s-1PKCS\s0#12
file unreadable by some \*(L"export grade\*(R" software. By default the private
key is encrypted using triple \s-1DES\s0 and the certificate using 40 bit \s-1RC2\s0.
.Ip "\fB\-keypbe alg\fR, \fB\-certpbe alg\fR" 4
these options allow the algorithm used to encrypt the private key and
certificates to be selected. Any \s-1PKCS\s0#5 v1.5 or \s-1PKCS\s0#12 \s-1PBE\s0 algorithm name
can be used (see \fB\s-1NOTES\s0\fR section for more information). If a a cipher name
(as output by the \fBlist-cipher-algorithms\fR command is specified then it
is used with \s-1PKCS\s0#5 v2.0. For interoperability reasons it is advisable to only
use \s-1PKCS\s0#12 algorithms.
.Ip "\fB\-keyex|\-keysig\fR" 4
specifies that the private key is to be used for key exchange or just signing.
This option is only interpreted by \s-1MSIE\s0 and similar \s-1MS\s0 software. Normally
\*(L"export grade\*(R" software will only allow 512 bit \s-1RSA\s0 keys to be used for
encryption purposes but arbitrary length keys for signing. The \fB\-keysig\fR
option marks the key for signing only. Signing only keys can be used for
S/\s-1MIME\s0 signing, authenticode (ActiveX control signing)  and \s-1SSL\s0 client
authentication, however due to a bug only \s-1MSIE\s0 5.0 and later support
the use of signing only keys for \s-1SSL\s0 client authentication.
.Ip "\fB\-macalg digest\fR" 4
specify the \s-1MAC\s0 digest algorithm. If not included them \s-1SHA1\s0 will be used.
.Ip "\fB\-nomaciter\fR, \fB\-noiter\fR" 4
these options affect the iteration counts on the \s-1MAC\s0 and key algorithms.
Unless you wish to produce files compatible with \s-1MSIE\s0 4.0 you should leave
these options alone.
.Sp
To discourage attacks by using large dictionaries of common passwords the
algorithm that derives keys from passwords can have an iteration count applied
to it: this causes a certain part of the algorithm to be repeated and slows it
down. The \s-1MAC\s0 is used to check the file integrity but since it will normally
have the same password as the keys and certificates it could also be attacked.
By default both \s-1MAC\s0 and encryption iteration counts are set to 2048, using
these options the \s-1MAC\s0 and encryption iteration counts can be set to 1, since
this reduces the file security you should not use these options unless you
really have to. Most software supports both \s-1MAC\s0 and key iteration counts.
\s-1MSIE\s0 4.0 doesn't support \s-1MAC\s0 iteration counts so it needs the \fB\-nomaciter\fR
option.
.Ip "\fB\-maciter\fR" 4
This option is included for compatibility with previous versions, it used
to be needed to use \s-1MAC\s0 iterations counts but they are now used by default.
.Ip "\fB\-nomac\fR" 4
don't attempt to provide the \s-1MAC\s0 integrity.
.Ip "\fB\-rand file(s)\fR" 4
a file or files containing random data used to seed the random number
generator, or an \s-1EGD\s0 socket (see RAND_egd(3)).
Multiple files can be specified separated by a \s-1OS\s0\-dependent character.
The separator is \fB;\fR for \s-1MS\s0\-Windows, \fB,\fR for OpenVMS, and \fB:\fR for
all others.
.Ip "\fB\-CAfile file\fR" 4
\s-1CA\s0 storage as a file.
.Ip "\fB\-CApath dir\fR" 4
\s-1CA\s0 storage as a directory. This directory must be a standard certificate
directory: that is a hash of each subject name (using \fBx509 \-hash\fR) should be
linked to each certificate.
.Ip "\fB\-\s-1CSP\s0 name\fR" 4
write \fBname\fR as a Microsoft \s-1CSP\s0 name.
.SH "NOTES"
Although there are a large number of options most of them are very rarely
used. For PKCS#12 file parsing only \fB\-in\fR and \fB\-out\fR need to be used
for PKCS#12 file creation \fB\-export\fR and \fB\-name\fR are also used.
.PP
If none of the \fB\-clcerts\fR, \fB\-cacerts\fR or \fB\-nocerts\fR options are present
then all certificates will be output in the order they appear in the input
PKCS#12 files. There is no guarantee that the first certificate present is
the one corresponding to the private key. Certain software which requires
a private key and certificate and assumes the first certificate in the
file is the one corresponding to the private key: this may not always
be the case. Using the \fB\-clcerts\fR option will solve this problem by only
outputting the certificate corresponding to the private key. If the CA
certificates are required then they can be output to a separate file using
the \fB\-nokeys \-cacerts\fR options to just output CA certificates.
.PP
The \fB\-keypbe\fR and \fB\-certpbe\fR algorithms allow the precise encryption
algorithms for private keys and certificates to be specified. Normally
the defaults are fine but occasionally software can't handle triple DES
encrypted private keys, then the option \fB\-keypbe PBE\-SHA1-RC2-40\fR can
be used to reduce the private key encryption to 40 bit RC2. A complete
description of all algorithms is contained in the \fBpkcs8\fR manual page.
.SH "EXAMPLES"
Parse a PKCS#12 file and output it to a file:
.PP
.Vb 1
\& openssl pkcs12 -in file.p12 -out file.pem
.Ve
Output only client certificates to a file:
.PP
.Vb 1
\& openssl pkcs12 -in file.p12 -clcerts -out file.pem
.Ve
Don't encrypt the private key:
 
 openssl pkcs12 \-in file.p12 \-out file.pem \-nodes
.PP
Print some info about a PKCS#12 file:
.PP
.Vb 1
\& openssl pkcs12 -in file.p12 -info -noout
.Ve
Create a PKCS#12 file:
.PP
.Vb 1
\& openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate"
.Ve
Include some extra certificates:
.PP
.Vb 2
\& openssl pkcs12 -export -in file.pem -out file.p12 -name "My Certificate" \e
\&  -certfile othercerts.pem
.Ve
.SH "BUGS"
Some would argue that the PKCS#12 standard is one big bug :\-)
.PP
Versions of OpenSSL before 0.9.6a had a bug in the PKCS#12 key generation
routines. Under rare circumstances this could produce a PKCS#12 file encrypted
with an invalid key. As a result some PKCS#12 files which triggered this bug
from other implementations (MSIE or Netscape) could not be decrypted
by OpenSSL and similarly OpenSSL could produce PKCS#12 files which could
not be decrypted by other implementations. The chances of producing such
a file are relatively small: less than 1 in 256.
.PP
A side effect of fixing this bug is that any old invalidly encrypted PKCS#12
files cannot no longer be parsed by the fixed version. Under such circumstances
the \fBpkcs12\fR utility will report that the MAC is OK but fail with a decryption
error when extracting private keys.
.PP
This problem can be resolved by extracting the private keys and certificates
from the PKCS#12 file using an older version of OpenSSL and recreating the PKCS#12
file from the keys and certificates using a newer version of OpenSSL. For example:
.PP
.Vb 2
\& old-openssl -in bad.p12 -out keycerts.pem
\& openssl -in keycerts.pem -export -name "My PKCS#12 file" -out fixed.p12
.Ve
.SH "SEE ALSO"
pkcs8(1)

.rn }` ''
.IX Title "PKCS12 1"
.IX Name "pkcs12 - PKCS#12 file utility"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "COMMAND OPTIONS"

.IX Header "PARSING OPTIONS"

.IX Item "\fB\-in filename\fR"

.IX Item "\fB\-out filename\fR"

.IX Item "\fB\-pass arg\fR, \fB\-passin arg\fR"

.IX Item "\fB\-passout arg\fR"

.IX Item "\fB\-noout\fR"

.IX Item "\fB\-clcerts\fR"

.IX Item "\fB\-cacerts\fR"

.IX Item "\fB\-nocerts\fR"

.IX Item "\fB\-nokeys\fR"

.IX Item "\fB\-info\fR"

.IX Item "\fB\-des\fR"

.IX Item "\fB\-des3\fR"

.IX Item "\fB\-idea\fR"

.IX Item "\fB\-aes128\fR, \fB\-aes192\fR, \fB\-aes256\fR"

.IX Item "\fB\-camellia128\fR, \fB\-camellia192\fR, \fB\-camellia256\fR"

.IX Item "\fB\-nodes\fR"

.IX Item "\fB\-nomacver\fR"

.IX Item "\fB\-twopass\fR"

.IX Header "FILE CREATION OPTIONS"

.IX Item "\fB\-export\fR"

.IX Item "\fB\-out filename\fR"

.IX Item "\fB\-in filename\fR"

.IX Item "\fB\-inkey filename\fR"

.IX Item "\fB\-name friendlyname\fR"

.IX Item "\fB\-certfile filename\fR"

.IX Item "\fB\-caname friendlyname\fR"

.IX Item "\fB\-pass arg\fR, \fB\-passout arg\fR"

.IX Item "\fB\-passin password\fR"

.IX Item "\fB\-chain\fR"

.IX Item "\fB\-descert\fR"

.IX Item "\fB\-keypbe alg\fR, \fB\-certpbe alg\fR"

.IX Item "\fB\-keyex|\-keysig\fR"

.IX Item "\fB\-macalg digest\fR"

.IX Item "\fB\-nomaciter\fR, \fB\-noiter\fR"

.IX Item "\fB\-maciter\fR"

.IX Item "\fB\-nomac\fR"

.IX Item "\fB\-rand file(s)\fR"

.IX Item "\fB\-CAfile file\fR"

.IX Item "\fB\-CApath dir\fR"

.IX Item "\fB\-\s-1CSP\s0 name\fR"

.IX Header "NOTES"

.IX Header "EXAMPLES"

.IX Header "BUGS"

.IX Header "SEE ALSO"

